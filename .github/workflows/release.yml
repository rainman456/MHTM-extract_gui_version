name: Build and Release MHTML Extractor Executables

on:
  push:
    tags:
      - 'v*.*.*'  # e.g., v1.0.0
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to use for GitHub Release (e.g., v1.0.0)'
        required: true

permissions:
  contents: write  # Grant write access to create releases and upload assets

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyQtWebEngine requests beautifulsoup4 pyinstaller

      - name: Install UPX
        run: |
          brew install upx

      - name: Build macOS executable with PyInstaller, UPX, and exclusions
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --windowed \
                      --add-data="mhtm_parser3.py:." \
                      --onefile \
                      --upx-dir /usr/local/bin \
                      --exclude-module=tkinter \
                      --exclude-module=test \
                      --exclude-module=pydoc \
                      --exclude-module=unittest \
                      --exclude-module=matplotlib \
                      --exclude-module=numpy \
                      --exclude-module=pandas \
                      gui.py
        env:
          PYINSTALLER_NO_BUNDLE: 1

      - name: Create DMG
        run: |
          mkdir -p dmg-staging/MHTMLExtractor.app
          cp -R dist/MHTMLExtractor.app dmg-staging/
          hdiutil create -srcfolder dmg-staging -volname "MHTML Extractor" -format UDZO dist/MHTMLExtractor.dmg

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-macos
          path: dist/MHTMLExtractor.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyQtWebEngine requests beautifulsoup4 pyinstaller

      - name: Download and Setup UPX
        run: |
          curl -L -o upx.zip https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip
          tar -xf upx.zip || unzip upx.zip

      - name: Build Windows executable with UPX and exclusions
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --windowed \
                      --add-data="mhtm_parser3.py;." \
                      --onefile \
                      --upx-dir upx-4.2.1-win64 \
                      --exclude-module=tkinter \
                      --exclude-module=unittest \
                      --exclude-module=test \
                      --exclude-module=pydoc \
                      --exclude-module=matplotlib \
                      --exclude-module=numpy \
                      --exclude-module=pandas \
                      gui.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-windows
          path: dist/MHTMLExtractor.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt5 PyQtWebEngine requests beautifulsoup4 pyinstaller

      - name: Install system libraries for PyQt and UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0 libxcb-randr0 libxcb-xtest0 libxcb-xinerama0 libxcb-shape0 libxcb-xfixes0 upx-ucl

      - name: Build Linux executable with UPX and exclusions
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --add-data="mhtm_parser3.py:." \
                      --onefile \
                      --upx-dir /usr/bin \
                      --exclude-module=tkinter \
                      --exclude-module=test \
                      --exclude-module=unittest \
                      --exclude-module=pydoc \
                      --exclude-module=matplotlib \
                      --exclude-module=numpy \
                      --exclude-module=pandas \
                      gui.py

      - name: Make executable
        run: chmod +x dist/MHTMLExtractor

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-linux
          path: dist/MHTMLExtractor

  release:
    name: Publish GitHub Release
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: MHTMLExtractor-macos
          path: artifacts/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: MHTMLExtractor-windows
          path: artifacts/

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: MHTMLExtractor-linux
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/MHTMLExtractor.dmg
            artifacts/MHTMLExtractor.exe
            artifacts/MHTMLExtractor
          tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
