name: Build and Release MHTML Extractor Executables

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build macOS executable
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --windowed \
                      --add-data="mhtml_parser.py:." \
                      --onefile \
                      mhtml_extractor_gui.py
        env:
          PYINSTALLER_NO_BUNDLE: 1  # Avoid bundling issues on macOS

      - name: Create DMG
        run: |
          hdiutil create -srcfolder dist/MHTMLExtractor.app -volname "MHTML Extractor" -format UDZO dist/MHTMLExtractor.dmg

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-macos
          path: |
            dist/MHTMLExtractor.app
            dist/MHTMLExtractor.dmg

      - name: Create Release and Upload macOS Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/MHTMLExtractor.app
            dist/MHTMLExtractor.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Windows executable
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --windowed \
                      --add-data="mhtml_parser.py;." \
                      --onefile \
                      mhtml_extractor_gui.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-windows
          path: dist/MHTMLExtractor.exe

      - name: Create Release and Upload Windows Asset
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/MHTMLExtractor.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install system dependencies for PyQt5
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0 libxcb-randr0 libxcb-xtest0 libxcb-xinerama0 libxcb-shape0 libxcb-xfixes0

      - name: Build Linux executable
        run: |
          pyinstaller --name=MHTMLExtractor \
                      --add-data="mhtml_parser.py:." \
                      --onefile \
                      mhtml_extractor_gui.py

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: MHTMLExtractor-linux
          path: dist/MHTMLExtractor

      - name: Create Release and Upload Linux Asset
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/MHTMLExtractor
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
